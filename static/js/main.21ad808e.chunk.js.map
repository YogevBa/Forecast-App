{"version":3,"sources":["api.js","redux/actions.js","components/ToggleBtn/ToggleBtn.js","components/Header/Header.js","components/Modal/Modal.js","components/SearchBar/SearchBar.js","components/SmallCard/SmallCard.js","components/ForecastCard/ForecastCard.js","screens/Home/Home.js","screens/Favorites/Favorites.js","App.js","redux/store.js","index.js"],"names":["API_KEY","getWeather","id","a","query","fetch","response","json","data","getCity","city","weatherFiveDay","base","autoCompleteSearch","value","fetchCity","res","type","fetchRes","getCityReq","dispatch","then","name","LocalizedName","key","Key","fiveDayForecast","setModal","bool","connect","state","isDarkMode","toggleDarkMode","props","console","log","className","onClick","to","role","aria-label","isModal","Modal","isOpen","ModalBody","style","textAlign","color","fontWeight","ModalFooter","Button","currentCity","handleSearchCity","getSearchedCity","useState","setQuery","onSubmit","e","preventDefault","length","htmlFor","onChange","target","getCurrentCity","cardType","Date","substring","Day","IconPhrase","Night","Temperature","Metric","Value","Unit","WeatherText","favorites","isFavorite","handleFavorites","actionType","setFavoriteReq","useEffect","renderForecastDays","DailyForecasts","map","itm","idx","find","some","filter","Home","renderFavorites","App","exact","path","render","INITIAL_STATE","store","createStore","action","applyMiddleware","thunk","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.21ad808e.chunk.js","sourcesContent":["const API_KEY = 'Mv41x4UhP2u4b46OZ2PQa6JdSINCQ7UL'\r\n\r\n// uses the city code to get the current weather for that location\r\nexport const getWeather = async (id) => {\r\n    const base = `https://dataservice.accuweather.com/currentconditions/v1/`;\r\n    const query = `${id}?apikey=${API_KEY}`;\r\n    const response = await fetch(base + query);\r\n    const data = await response.json();\r\n    return data ? data[0] : []\r\n}\r\n\r\n\r\n// gets the city code\r\nexport const getCity = async (city) => {\r\n    const base = `https://dataservice.accuweather.com/locations/v1/cities/search`;\r\n    const query = `?apikey=${API_KEY}&q=${city}`\r\n    const response = await fetch(base + query);\r\n    const data = await response.json()\r\n\r\n    return (data ? data[0] : [])\r\n}\r\n\r\n\r\n// gets 5 days forecast of the location\r\nexport const weatherFiveDay = async (city) => {\r\n    const base = `https://dataservice.accuweather.com/forecasts/v1/daily/5day/${city}`;\r\n    const query = `?apikey=${API_KEY}`;\r\n    const response = await fetch(base + query);\r\n    const data = await response.json()\r\n    return (data);\r\n}\r\n\r\n// gets location by query search\r\nexport const autoCompleteSearch = async (value) => {\r\n    const base = `https://dataservice.accuweather.com/locations/v1/cities/autocomplete`;\r\n    const query = `?apikey=${API_KEY}&q=${value}`;\r\n    const response = await fetch(base + query);\r\n    const data = await response.json()\r\n    return (data ? data[0] : [])\r\n\r\n\r\n}\r\n\r\n","import { getCity, getWeather, weatherFiveDay, autoCompleteSearch } from '../api'\r\n\r\nexport const fetchCity = res => {\r\n\r\n    return {\r\n        type: 'currentCity',\r\n        fetchRes: res\r\n    }\r\n}\r\n\r\nexport const getCityReq = (value) => {\r\n    return async (dispatch) => {\r\n        await getCity(value).then(async res => {\r\n            if (res) {\r\n                let city = {\r\n                    name: res.LocalizedName,\r\n                    key: res.Key\r\n                };\r\n                await getWeather(city.key)\r\n                    .then(res => {\r\n                        city.data = res\r\n                    })\r\n                await weatherFiveDay(city.key)\r\n                    .then(res => {\r\n                        city.fiveDayForecast = res\r\n                    })\r\n                dispatch(fetchCity(city))\r\n\r\n            }\r\n\r\n        })\r\n    }\r\n}\r\n\r\nexport const getSearchedCity = (value) => {\r\n    return async (dispatch) => {\r\n        await autoCompleteSearch(value).then(async res => {\r\n            if (res) {\r\n                console.log(res);\r\n                let city = {\r\n                    name: res.LocalizedName,\r\n                    key: res.Key\r\n                };\r\n                await getWeather(city.key)\r\n                    .then(res => {\r\n                        city.data = res\r\n                    })\r\n                await weatherFiveDay(city.key)\r\n                    .then(res => {\r\n                        city.fiveDayForecast = res\r\n                    })\r\n                dispatch(fetchCity(city))\r\n\r\n            } else {\r\n                dispatch(setModal(true))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const setModal = (bool) => {\r\n    return {\r\n        type: 'isModal',\r\n        fetchRes: bool\r\n    }\r\n}\r\n\r\n\r\nexport const setFavoriteReq = (city, actionType) => {\r\n    console.log(city);\r\n    if (actionType === 'add') {\r\n        return {\r\n            type: 'addFavorite',\r\n            fetchRes: city\r\n        }\r\n    }\r\n    else {\r\n        return {\r\n            type: 'removeFavorite',\r\n            fetchRes: city\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const toggleDarkMode = (bool) => {\r\n    return {\r\n        type:'isDarkMode',\r\n        fetchRes:bool\r\n    }\r\n}\r\n\r\n","import React from 'react'\r\nimport './toggleBtn.css'\r\nimport { connect } from 'react-redux'\r\nimport { toggleDarkMode } from '../../redux/actions'\r\n\r\n\r\n\r\nconst ToggleBtn = (props) => {\r\n\r\n    const toggleMode = () => {\r\n        props.toggleDarkMode(!props.isDarkMode)\r\n    }\r\n    console.log(props.isDarkMode);\r\n    return (\r\n        <div className=\"switchWrapper\">\r\n            <p className=\"switch_title\">View</p>\r\n            <label className=\"switch\">\r\n                <input type=\"checkbox\" onClick={toggleMode} />\r\n                <span className=\"slider round\"></span>\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isDarkMode: state.isDarkMode\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        toggleDarkMode: (bool) => dispatch(toggleDarkMode(bool))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ToggleBtn)","import React from 'react'\r\nimport './header.css'\r\nimport { Link } from \"react-router-dom\";\r\nimport ToggleBtn from '../../components/ToggleBtn/ToggleBtn'\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <nav className={props.isDarkMode ? 'header_container_dark' : 'header_container'}>\r\n            <div className='header_title'>Weather Application</div>\r\n            <ul className='navigation'>\r\n                <ToggleBtn />\r\n                <Link to=\"/\" className=\"links\"><li className=\"page_link\"><span role=\"img\" aria-label=\"home emoji\">🏠</span> Home</li></Link>\r\n                <Link to=\"/favorites\" className=\"links\"><li className=\"page_link\"><span role=\"img\" aria-label=\"favorites emoji\">⭐</span> Favorites</li></Link>\r\n\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isDarkMode: state.isDarkMode\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps)(Header)","import React from 'react';\r\nimport { Button, Modal, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { setModal } from '../../redux/actions'\r\nimport { connect } from 'react-redux';\r\n\r\nconst ModalWarning = (props) => {\r\n    const {\r\n        className,\r\n        isModal,\r\n        setModal\r\n    } = props;\r\n\r\n    const toggle = () => setModal(!isModal);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Modal isOpen={isModal} className={className}>\r\n                <ModalBody style={{ textAlign: 'center', color: 'gray', fontWeight:'bold' }}>\r\n                    Location not found, please try again\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"primary\" onClick={toggle}>OK</Button>{' '}\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isModal: state.isModal\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setModal: (bool) => dispatch(setModal(bool))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalWarning);","import React, { useState } from 'react'\r\nimport './searchBar.css'\r\nimport { getSearchedCity, setModal } from '../../redux/actions'\r\nimport { connect } from 'react-redux'\r\nimport ModalWarning from '../Modal/Modal'\r\n\r\n\r\nconst SearchBar = (props) => {\r\n    const [query, setQuery] = useState('')\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        if (query.length > 0) {\r\n            props.handleSearchCity(query)\r\n        }\r\n        else if (query.length === 0) {\r\n            return props.setModal(true)\r\n        }\r\n    }\r\n\r\n    const onChange = (e) => {\r\n        e.preventDefault()\r\n        setQuery(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form className=\"search_bar_form\" onSubmit={handleSubmit}>\r\n                {props.isModal && <ModalWarning/>}\r\n                <label htmlFor=\"infoNote\">Enter a location for weather information</label>\r\n                <input onChange={onChange} type='text' name=\"city\" className='search_bar' />\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentCity: state.currentCity,\r\n        isModal: state.isModal\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        handleSearchCity: (value) => dispatch(getSearchedCity(value)),\r\n        setModal: (bool) => dispatch(setModal(bool))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchBar)","import React from 'react'\r\nimport './smallCard.css'\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\nimport { getCityReq } from '../../redux/actions'\r\n\r\n\r\nconst SmallCard = (props) => {\r\n\r\n    const onSelect = (data) => {\r\n        return props.getCurrentCity(data.name)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                props.cardType === 'forecastFiveDays'\r\n                    ? <div className='smallCardWrapper'>\r\n                        <p className=\"day\">{props.data ? props.data.Date.substring(0, 10) : ''}</p>\r\n                        <p className=\"cardCondition\">Day: {props.data && props.data.Day ? props.data.Day.IconPhrase : ''}</p>\r\n                        <p className=\"cardCondition\">Night: {props.data && props.data.Day ? props.data.Night.IconPhrase : ''}</p>\r\n                    </div>\r\n                    : <Link to=\"/yogev-betito-14-8-2020\" className='smallCard_favorites links' onClick={() => onSelect(props.data)}>\r\n                        <p className=\"city\">{props.data && props.data.name ? props.data.name : ''}</p>\r\n                        <p className=\"degrees\">\r\n                            {\r\n                                props.data && props.data.data\r\n                                    ? props.data.data.Temperature.Metric.Value\r\n                                    : ''\r\n                            }\r\n                            {\r\n                                props.data && props.data.data\r\n                                    ? props.data.data.Temperature.Metric.Unit\r\n                                    : ''\r\n                            }\r\n                        </p>\r\n                        <p className=\"cardCondition\">{props.data && props.data.data ? props.data.data.WeatherText : ''}</p>\r\n                    </Link>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {}\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getCurrentCity: (city) => dispatch(getCityReq(city))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SmallCard)","import React, { useEffect } from 'react'\r\nimport './forecastCard.css'\r\nimport SmallCard from '../SmallCard/SmallCard'\r\nimport { connect } from 'react-redux';\r\nimport { setFavoriteReq, getCityReq } from '../../redux/actions'\r\n\r\n\r\nconst ForecastCard = (props) => {\r\n\r\n    const handleFavorites = (city, actionType) => {\r\n        const { currentCity } = props\r\n        let isExisted = props.favorites.some(itm => itm.key === currentCity.key)\r\n        if (!isExisted) {\r\n            props.handleFavorites(city, actionType)\r\n        }\r\n        else {\r\n            const favorites = props.favorites.filter(itm => itm.key !== city.key)\r\n            props.handleFavorites(favorites, actionType)\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if (!props.currentCity.name) {\r\n            props.getCurrentCity('tel aviv')\r\n        }\r\n\r\n        return () => {\r\n            props.getCurrentCity('')\r\n        }\r\n    }, [props.currentCity.name])\r\n\r\n\r\n    const renderForecastDays = props.currentCity && props.currentCity.fiveDayForecast\r\n        ? props.currentCity.fiveDayForecast.DailyForecasts.map((itm, idx) => <SmallCard cardType={'forecastFiveDays'} data={itm} key={idx} />)\r\n        : []\r\n\r\n    const isFavorite = props.favorites.find(itm => itm.key === props.currentCity.key)\r\n    return (\r\n        <div className=\"forecast_Container\">\r\n            <div className=\"card_header\">\r\n\r\n                <div className=\"location_info\">\r\n                    <p>{props.currentCity ? props.currentCity.name : ''}</p>\r\n                    <p>\r\n                        {\r\n                            props.currentCity.data\r\n                                ? props.currentCity.data.Temperature.Metric.Value\r\n                                : ''\r\n                        }\r\n                        {\r\n                            props.currentCity.data\r\n                                ? props.currentCity.data.Temperature.Metric.Unit\r\n                                : ''\r\n                        }\r\n                    </p>\r\n                </div>\r\n                <div className=\"btnsWrapper\">\r\n\r\n                    <p className=\"emoji\">{isFavorite ? '💖' : '🤍'}</p>\r\n                    <button className={isFavorite ? 'removeFromFavoritesBtn actionBtn' : 'addToFavoritesBtn actionBtn'}\r\n                        onClick={() => handleFavorites(props.currentCity, isFavorite ? 'remove' : 'add')}>\r\n                        {isFavorite ? 'Remove from Favorites' : 'Add to Favorites'}\r\n                    </button>\r\n                </div>\r\n\r\n            </div>\r\n            <h3 className=\"condition\">{props.currentCity.data ? props.currentCity.data.WeatherText : ''}</h3>\r\n            <div className=\"cardsContainer\">\r\n                {renderForecastDays}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        favorites: state.favorites,\r\n        currentCity: state.currentCity,\r\n        isFavorite: state.isFavorite\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n\r\n        handleFavorites: (city, actionType) => dispatch(setFavoriteReq(city, actionType)),\r\n        getCurrentCity: (city) => dispatch(getCityReq(city))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ForecastCard)","import React from 'react'\r\nimport './home.css'\r\nimport SearchBar from '../../components/SearchBar/SearchBar'\r\nimport ForecastCard from '../../components/ForecastCard/ForecastCard'\r\n\r\n\r\n\r\nconst Home = (props) => {\r\n    return (\r\n        <div className=\"home_wrapper\">\r\n            <SearchBar />\r\n            <ForecastCard />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Home","import React from 'react'\r\nimport './favorites.css'\r\nimport SmallCard from '../../components/SmallCard/SmallCard'\r\nimport { connect } from 'react-redux';\r\n\r\nconst Favorites = (props) => {\r\n    const renderFavorites = props.favorites.length > 0 ? props.favorites.map(itm => <SmallCard cardType={''} key={itm.key} data={itm} />) : []\r\n    return (\r\n        <>\r\n            <h3 className=\"favorites_title\">Favorites</h3>\r\n            <div className=\"cards_container\">\r\n                {renderFavorites.length > 0 ? renderFavorites : <p className=\"infoNote\">There are no Locations saved yet</p>}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        favorites: state.favorites\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps)(Favorites)","import React from 'react';\nimport './App.css';\nimport { Route } from \"react-router-dom\";\nimport Header from './components/Header/Header'\nimport Home from './screens/Home/Home'\nimport Favorites from './screens/Favorites/Favorites'\n\nconst App = () => {\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Route\n        exact\n        path=\"/yogev-betito-14-8-2020\"\n        render={() => (\n          <Home />\n        )}\n      />\n      <Route\n        exact\n        path=\"/favorites\"\n        render={() => (\n          <Favorites />\n        )}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\n\r\nconst INITIAL_STATE = {\r\n    currentCity: [],\r\n    favorites: [],\r\n    isModal: false,\r\n    isDarkMode: false\r\n}\r\n\r\n\r\nconst reducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case 'currentCity':\r\n            return {\r\n                ...state,\r\n                currentCity: action.fetchRes\r\n            }\r\n        case 'addFavorite':\r\n            return {\r\n                ...state,\r\n                favorites: [...state.favorites, action.fetchRes]\r\n            }\r\n\r\n        case 'removeFavorite':\r\n            return {\r\n                ...state,\r\n                favorites: action.fetchRes\r\n            }\r\n        case 'isModal':\r\n            return {\r\n                ...state,\r\n                isModal: action.fetchRes\r\n            }\r\n        case 'isDarkMode':\r\n            return {\r\n                ...state,\r\n                isDarkMode: action.fetchRes\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const store = createStore(reducer, applyMiddleware(thunk))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./index.css\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from './App';\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}